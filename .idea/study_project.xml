<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="course">
        <Course>
          <option name="authors">
            <list>
              <StepicUser>
                <option name="accessToken" value="" />
                <option name="firstName" value="Alexander" />
                <option name="guest" value="false" />
                <option name="id" value="-1" />
                <option name="lastName" value="S. Kulikov" />
                <option name="refreshToken" value="" />
              </StepicUser>
            </list>
          </option>
          <option name="courseMode" value="Course Creator" />
          <option name="courseType" value="PyCharm" />
          <option name="description" value="Learn algorithms through solving programming challenges in the professional PyCharm IDE!" />
          <option name="language" value="Python 3.x" />
          <option name="languageCode" value="en" />
          <option name="lessons">
            <list>
              <Lesson>
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Programming Challenges" />
                <option name="updateDate" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Sum of Two Digits" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="# Welcome!&#10;&#10;This course powers our popular&#10;&lt;a href=&quot;https://www.coursera.org/specializations/data-structures-algorithms&quot;&gt;Data Structures and Algorithms online specialization on Coursera&lt;/a&gt;&#10;and&#10;&lt;a href=&quot;https://www.edx.org/micromasters/ucsandiegox-algorithms-and-data-structures&quot;&gt;online MicroMasters program at edX&lt;/a&gt;.&#10;We encourage you to sign up for a session and learn&#10;this material while interacting with thousands of&#10;other talented students from around the world.&#10;&#10;A particular goal of this framework is to help you to learn how to&#10;write efficient, reliable, and compact Python code. The PyCharm IDE&#10;will make the learning process smooth and enjoyable: it will help&#10;you with testing and debugging as well as structuring and formatting your code.&#10;&#10;The assumed pipeline is the following.&#10;For each programming challenge in this course:&#10;&lt;ol&gt;&#10;&lt;li&gt;Design an algorithm, prove that it is correct and has the expected asymptotic behavior.&lt;/li&gt;&#10;&lt;li&gt;Implement it in Python here, in PyCharm Edu.&lt;/li&gt;&#10;&lt;li&gt;Implement unit tests and stress tests for your solution. If a bug is found, fix it and test again.&lt;/li&gt;&#10;&lt;li&gt;By pressing the play button on the right pane, check your solution against a few test cases.&lt;/li&gt;&#10;&lt;li&gt;Finally, when you are happy with your implementation, submit to Coursera or edX.&#10;    This will test your solution against dozens of carefully selected tests cases.&#10;    For each test case, the autograding system checks whetheryour solution is fast enough and&#10;    computes the right result.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;Enjoy!&#10;&#10;# Getting Started&#10;&#10;1. We assume that you are already familiar&#10;with basic Python programming. To refresh&#10;your Python skills, you may want to take an&#10;Introductory Python course here&#10;(File -&gt; Browse Courses).&#10;&#10;2. To get familiar with PyCharm Edu, take a look&#10;at the Start Guide: https://www.jetbrains.com/help/pycharm-edu/student-s-guide.html&#10;&#10;# Task&#10;&#10;## Implementing a Solution&#10;Implement the `compute_sum` function that takes two digits (that is,&#10;integers in the range from 0 to 9) and returns the sum of these two digits.&#10;&#10;We start from this ridiculously simple problem to show you the&#10;pipeline of designing an algorithm,&#10;implementing it, testing and debugging your program, and&#10;submitting it to the grading system.&#10;&#10;For this trivial problem, we will skip “Designing an algorithm” and &quot;Implementing&quot;&#10;steps and will move to testing.&#10;&#10;## Testing&#10;Switch to the file `sum_of_two_digits_unit_tests.py`.&#10;It contains unit tests for your implementation. If&#10;you haven't heard about unit testing before, we&#10;encourage you to read about it here:&#10;https://docs.python.org/3/library/unittest.html&#10;or two take a short course here, in PyCharm Edu&#10;(through File -&gt; Browse Courses).&#10;&#10;For this starting programming challenge, we've already&#10;implemented everything for you. Press the green &quot;Execute&quot;&#10;button in the top left corner of the source file to run the&#10;tests and make sure that all tests pass successfully.&#10;&#10;In this challenge, the space of all possible inputs&#10;is so small that it is possible to check just all possible&#10;test cases: the `test_all_inputs` method goes through all&#10;pairs $0 \le a, b \le 9$.&#10;&#10;## Checking Your Implementation&#10;When all unit tests pass successfully, press the &quot;Check task&quot;&#10;button in the top part of this pane.&#10;&#10;## Submitting to Coursera/edX&#10;In the `sum_of_two_digits.py` file, uncomment the last&#10;three lines (they are responsible for reading the input and&#10;writing the output) and submit to Coursera/edX.&#10;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="sum_of_two_digits.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="length" value="20" />
                                      <option name="offset" value="172" />
                                      <option name="selected" value="false" />
                                      <option name="subtaskInfos">
                                        <map>
                                          <entry key="0">
                                            <value>
                                              <AnswerPlaceholderSubtaskInfo>
                                                <option name="answer" value="" />
                                                <option name="hasFrame" value="true" />
                                                <option name="hints">
                                                  <list>
                                                    <option value="Just type &quot;a + b&quot;" />
                                                  </list>
                                                </option>
                                                <option name="needInsertText" value="false" />
                                                <option name="placeholderText" value="write your code here" />
                                                <option name="possibleAnswer" value="type here" />
                                                <option name="selected" value="false" />
                                                <option name="status" value="Unchecked" />
                                              </AnswerPlaceholderSubtaskInfo>
                                            </value>
                                          </entry>
                                        </map>
                                      </option>
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="index" value="0" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="sum_of_two_digits.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="sum_of_two_digits_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="index" value="2" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="sum_of_two_digits_unit_tests.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Maximum Pairwise Product" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;/html&gt;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="maximum_pairwise_product.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="0" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="id" value="0" />
                <option name="index" value="2" />
                <option name="name" value="Algorithmic Warm Up" />
                <option name="updateDate" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Fibonacci Number" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="# Introduction&#10;Fibonacci numbers are defined recursively: $F_0=0$, $F_1=1$,&#10;and $F_n=F_{n-1}+F_{n-2}$ for $n \ge 1$.&#10;This definition results in the recursive function `compute_fibonacci_number_naive`&#10;that you see on the left in the file `fibonacci_number.py`.&#10;&#10;# Running the Naive Solution&#10;Try to compute $F_{10}$ using this function. For this, add the line&#10;```&#10;print(fibonacci_number_naive(10))&#10;```&#10;to the end of the file and press the green Run button&#10;at the top left corner of the Python file. You'll see that it will print the result (55) in the&#10;Run pane at the bottom in blink of an eye. Now, change 10 to 40 and press the Run button again. You'll see&#10;that the solution hangs and does not print anything. Stop it by pressing the red Stop button in the Run pane.&#10;&#10;Let's try to understand why our current solution hangs.&#10;To this end, let's add *debug printing* to the `fibonacci_number_naive` function:&#10;add the line&#10;```&#10;print(&quot;Compute F sub&quot;, n)&#10;```&#10;to the beginning of the function and run it again.&#10;You'll see a seemingly endless series of recursive calls in the Run pane:&#10;```&#10;Compute F sub 1&#10;Compute F sub 0&#10;Compute F sub 7&#10;Compute F sub 6&#10;Compute F sub 5&#10;Compute F sub 4&#10;Compute F sub 3&#10;Compute F sub 2&#10;Compute F sub 1&#10;Compute F sub 0&#10;Compute F sub 1&#10;Compute F sub 2&#10;Compute F sub 1&#10;Compute F sub 0&#10;Compute F sub 3&#10;```&#10;This output, in particular, reveals the reason why our&#10;current solution is so slow:&#10;*it computes the same thing again many times*.&#10;&#10;&#10;# Task&#10;&#10;## Implement an Efficient Solution&#10;Implement the `fibonacci_number` function.&#10;Make sure to avoid recomputing the same thing again.&#10;Then press the &quot;Check Task&quot; button in the Task Description pane.&#10;This will check whether your implementation computes the 10-th Fibonacci&#10;number correctly.&#10;&#10;## Test Your Solution&#10;Now, switch to the file `fibonacci_number_unit_tests.py`.&#10;It consists of several unit tests. The function `test_small`&#10;checks that your implementation computes the same as the naive one&#10;for all $0 \le n &lt; 8$ (this is affordable, since for $n &lt; 7$ the&#10;`fibonacci_number_naive` is fast enough).&#10;The function `test_large`&#10;checks&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="fibonacci_number.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="length" value="20" />
                                      <option name="offset" value="268" />
                                      <option name="selected" value="false" />
                                      <option name="subtaskInfos">
                                        <map>
                                          <entry key="0">
                                            <value>
                                              <AnswerPlaceholderSubtaskInfo>
                                                <option name="answer" value="" />
                                                <option name="hasFrame" value="true" />
                                                <option name="hints">
                                                  <list>
                                                    <option value="Make sure to avoid recomputing the same thing again. For this, you may want to allocate an array like this:&#10;&#10;fibonacci = [0] * (n + 1)" />
                                                  </list>
                                                </option>
                                                <option name="needInsertText" value="false" />
                                                <option name="placeholderText" value="write your code here" />
                                                <option name="possibleAnswer" value="write your code here" />
                                                <option name="selected" value="false" />
                                                <option name="status" value="Unchecked" />
                                              </AnswerPlaceholderSubtaskInfo>
                                            </value>
                                          </entry>
                                        </map>
                                      </option>
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="index" value="0" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="fibonacci_number.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="fibonacci_number_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="329" />
                                      <option name="selected" value="false" />
                                      <option name="subtaskInfos">
                                        <map>
                                          <entry key="0">
                                            <value>
                                              <AnswerPlaceholderSubtaskInfo>
                                                <option name="answer" value="" />
                                                <option name="hasFrame" value="true" />
                                                <option name="hints">
                                                  <list>
                                                    <option value="Compute the value of the 35-th Fibonacci number and add it here. This way, the function test_large will also check that your implementation computes F_{35} correctly." />
                                                  </list>
                                                </option>
                                                <option name="needInsertText" value="false" />
                                                <option name="placeholderText" value="(35, ?)" />
                                                <option name="possibleAnswer" value="(35, ?)" />
                                                <option name="selected" value="false" />
                                                <option name="status" value="Unchecked" />
                                              </AnswerPlaceholderSubtaskInfo>
                                            </value>
                                          </entry>
                                        </map>
                                      </option>
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="index" value="2" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="fibonacci_number_unit_tests.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
              </Lesson>
            </list>
          </option>
          <option name="name" value="Algorithmic Toolbox" />
        </Course>
      </option>
      <option name="toolWindowMode" value="TEXT" />
      <option name="turnEditingMode" value="false" />
      <option name="VERSION" value="8" />
      <option name="myUserTests">
        <map />
      </option>
    </StudyTaskManager>
  </component>
</project>